/* =======================================================
 * pcdtojpeg - a Photo-CD to JPEG image format converter
 * =======================================================
 *
 * Project Info:  http://sourceforge.net/projects/pcdtojpeg/
 * Project Lead:  Sandy McGuffog (sandy.cornerfix@gmail.com);
 *
 * (C) Copyright 2009-2011, by Sandy McGuffog and Contributors.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * ---------------
 * main.cpp
 * ---------------
 * (C) Copyright 2009-2013, by Sandy McGuffog and Contributors.
 *
 * Original Author:  Sandy McGuffog;
 * Contributor(s):   -;
 *
 * Acknowlegements:   Hadmut Danisch (danisch@ira.uka.de), who authored hpcdtoppm in the early
 *                    90's. Although this software itself is unrelated to hpcdtoppm, the pcdDecoder 
 *                    package would not have been possible without Hadmut's original reverse
 *                    engineering of the PCD file format.
 *                    
 *                    Ted Felix (http://tedfelix.com/ ), who provided sample PCD images and assorted 
 *                    PCD documentation, as well as testing early versions of this software
 *
 * Changes
 * -------
 *
 * V1.0.2 - 1 July 2009 - Added YCC color space to the decoder library
 *                        Improved sRGB shadow detail and color handling
 *
 * V1.0.3 - 1 Sept 2009 - V1.0.3 decoder library
 *                        Even more path separator finding code
 *                        Enhanced 64Base IPE file location algorithm
 *                        More descriptive error messages
 * V1.0.4 - 19 Sept 2009 - Multithreading under Windows
 *
 * V1.0.5 - 21 Sept 2009 - More efficient memory management
 *
 * V1.0.7 - 12 Feb 2010 - New decoder library version
 *
 * V1.0.8 - 20 Mar 2010 - New decoder library version
 *                        
 * V1.0.9 - 23 Sept 2010 - New decoder library version
 * 
 * V1.0.10 - 3 April 2011 - New decoder library version
 * 
 * V1.0.11 - 3 Jan 2013 - Clean some includes for linux
 * 
 */

 /* Compiling under Linux, etc:
 *  The Ubuntu command line is: 
 *    g++ main.cpp pcdDecode.cpp -ljpeg -lpthread -o pcdtojpeg
 *  or, if you don't want to use pthreads:
 *    g++ main.cpp pcdDecode.cpp -DmNoPThreads -ljpeg -o pcdtojpeg
 *
 * pcdDecode does not call any library functions from a thread, so generally neither the
 * -pthread option nor -D_REENTRANT are required. They will however do no harm, and
 * may be helpful in causing gcc to link against -lpthread automatically rather than 
 * having to specify it
 */


#include <iostream>
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <unistd.h>

extern "C" {
#include "jpeglib.h"
}
#include "pcdDecode.h"

#if defined(_WIN32) || defined(_WIN32_) || defined(__WIN32__) || defined(WIN32) || defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MINGW32__) || defined(__BORLANDC__)
#define pcdHaveWinOS 1
#include <direct.h>
#endif

//////////////////////////////////////////////////////////////
//
// sRGB profile
// sRGB profile is (c) Hewlett-Packard Company. It is included here 
// under the following terms:
//
//////////////////////////////////////////////////////////////
//
// Hewlett-Packard Company
//
// sRGB Profile Licensing Agreement:
// To anyone who acknowledges that the file "sRGB Color Space Profile.icm" is
// provided "AS IS" WITH NO EXPRESS OR IMPLIED WARRANTY: permission to use, copy
// and distribute this file for any purpose is hereby granted without fee,
// provided that the file is not changed including the HP copyright notice tag,
// and that the name of Hewlett-Packard Company not be used in advertising or
// publicity pertaining to distribution of the software without specific, written
// prior permission. Hewlett-Packard Company makes no representations about the
// suitability of this software for any purpose.
//
// Reference : http://web.archive.org/web/20020603153925/srgb.com/usingsrgb.html
//

static const uint8_t ksRGBProfile [] =
{
	0x49, 0x43, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x00,		// First the APP2 marker "ICC_PROFILE\0"
	0x01, 0x01,																	// then the marker sequence number and the 
																				// number of markers
	0x00, 0x00, 0x0c, 0x48, 0x4c, 0x69, 0x6e, 0x6f, 0x02, 0x10, 0x00, 0x00,		// Now the actual sRGB icc profile
	0x6d, 0x6e, 0x74, 0x72, 0x52, 0x47, 0x42, 0x20, 0x58, 0x59, 0x5a, 0x20,
	0x07, 0xce, 0x00, 0x02, 0x00, 0x09, 0x00, 0x06, 0x00, 0x31, 0x00, 0x00,
	0x61, 0x63, 0x73, 0x70, 0x4d, 0x53, 0x46, 0x54, 0x00, 0x00, 0x00, 0x00,
	0x49, 0x45, 0x43, 0x20, 0x73, 0x52, 0x47, 0x42, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0xd6,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x2d, 0x48, 0x50, 0x20, 0x20,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
	0x63, 0x70, 0x72, 0x74, 0x00, 0x00, 0x01, 0x50, 0x00, 0x00, 0x00, 0x33,
	0x64, 0x65, 0x73, 0x63, 0x00, 0x00, 0x01, 0x84, 0x00, 0x00, 0x00, 0x6c,
	0x77, 0x74, 0x70, 0x74, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x14,
	0x62, 0x6b, 0x70, 0x74, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x14,
	0x72, 0x58, 0x59, 0x5a, 0x00, 0x00, 0x02, 0x18, 0x00, 0x00, 0x00, 0x14,
	0x67, 0x58, 0x59, 0x5a, 0x00, 0x00, 0x02, 0x2c, 0x00, 0x00, 0x00, 0x14,
	0x62, 0x58, 0x59, 0x5a, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x14,
	0x64, 0x6d, 0x6e, 0x64, 0x00, 0x00, 0x02, 0x54, 0x00, 0x00, 0x00, 0x70,
	0x64, 0x6d, 0x64, 0x64, 0x00, 0x00, 0x02, 0xc4, 0x00, 0x00, 0x00, 0x88,
	0x76, 0x75, 0x65, 0x64, 0x00, 0x00, 0x03, 0x4c, 0x00, 0x00, 0x00, 0x86,
	0x76, 0x69, 0x65, 0x77, 0x00, 0x00, 0x03, 0xd4, 0x00, 0x00, 0x00, 0x24,
	0x6c, 0x75, 0x6d, 0x69, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x14,
	0x6d, 0x65, 0x61, 0x73, 0x00, 0x00, 0x04, 0x0c, 0x00, 0x00, 0x00, 0x24,
	0x74, 0x65, 0x63, 0x68, 0x00, 0x00, 0x04, 0x30, 0x00, 0x00, 0x00, 0x0c,
	0x72, 0x54, 0x52, 0x43, 0x00, 0x00, 0x04, 0x3c, 0x00, 0x00, 0x08, 0x0c,
	0x67, 0x54, 0x52, 0x43, 0x00, 0x00, 0x04, 0x3c, 0x00, 0x00, 0x08, 0x0c,
	0x62, 0x54, 0x52, 0x43, 0x00, 0x00, 0x04, 0x3c, 0x00, 0x00, 0x08, 0x0c,
	0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x28, 0x63, 0x29, 0x20, 0x31, 0x39,
	0x39, 0x38, 0x20, 0x48, 0x65, 0x77, 0x6c, 0x65, 0x74, 0x74, 0x2d, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x72, 0x64, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x00, 0x00, 0x64, 0x65, 0x73, 0x63, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x12, 0x73, 0x52, 0x47, 0x42, 0x20, 0x49, 0x45, 0x43,
	0x36, 0x31, 0x39, 0x36, 0x36, 0x2d, 0x32, 0x2e, 0x31, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x73, 0x52, 0x47,
	0x42, 0x20, 0x49, 0x45, 0x43, 0x36, 0x31, 0x39, 0x36, 0x36, 0x2d, 0x32,
	0x2e, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x58, 0x59, 0x5a, 0x20, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xf3, 0x51, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x16, 0xcc,
	0x58, 0x59, 0x5a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x59, 0x5a, 0x20,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xa2, 0x00, 0x00, 0x38, 0xf5,
	0x00, 0x00, 0x03, 0x90, 0x58, 0x59, 0x5a, 0x20, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x62, 0x99, 0x00, 0x00, 0xb7, 0x85, 0x00, 0x00, 0x18, 0xda,
	0x58, 0x59, 0x5a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xa0,
	0x00, 0x00, 0x0f, 0x84, 0x00, 0x00, 0xb6, 0xcf, 0x64, 0x65, 0x73, 0x63,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x49, 0x45, 0x43, 0x20,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69,
	0x65, 0x63, 0x2e, 0x63, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x16, 0x49, 0x45, 0x43, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x65, 0x63, 0x2e,
	0x63, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x64, 0x65, 0x73, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e,
	0x49, 0x45, 0x43, 0x20, 0x36, 0x31, 0x39, 0x36, 0x36, 0x2d, 0x32, 0x2e,
	0x31, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x52, 0x47,
	0x42, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x20, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x20, 0x2d, 0x20, 0x73, 0x52, 0x47, 0x42, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x49, 0x45, 0x43,
	0x20, 0x36, 0x31, 0x39, 0x36, 0x36, 0x2d, 0x32, 0x2e, 0x31, 0x20, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x52, 0x47, 0x42, 0x20, 0x63,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20,
	0x2d, 0x20, 0x73, 0x52, 0x47, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x64, 0x65, 0x73, 0x63, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x20, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x49,
	0x45, 0x43, 0x36, 0x31, 0x39, 0x36, 0x36, 0x2d, 0x32, 0x2e, 0x31, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x56, 0x69, 0x65,
	0x77, 0x69, 0x6e, 0x67, 0x20, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x45, 0x43, 0x36, 0x31, 0x39,
	0x36, 0x36, 0x2d, 0x32, 0x2e, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x69, 0x65, 0x77,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xa4, 0xfe, 0x00, 0x14, 0x5f, 0x2e,
	0x00, 0x10, 0xcf, 0x14, 0x00, 0x03, 0xed, 0xcc, 0x00, 0x04, 0x13, 0x0b,
	0x00, 0x03, 0x5c, 0x9e, 0x00, 0x00, 0x00, 0x01, 0x58, 0x59, 0x5a, 0x20,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x09, 0x56, 0x00, 0x50, 0x00, 0x00,
	0x00, 0x57, 0x1f, 0xe7, 0x6d, 0x65, 0x61, 0x73, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x8f,
	0x00, 0x00, 0x00, 0x02, 0x73, 0x69, 0x67, 0x20, 0x00, 0x00, 0x00, 0x00,
	0x43, 0x52, 0x54, 0x20, 0x63, 0x75, 0x72, 0x76, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x0f,
	0x00, 0x14, 0x00, 0x19, 0x00, 0x1e, 0x00, 0x23, 0x00, 0x28, 0x00, 0x2d,
	0x00, 0x32, 0x00, 0x37, 0x00, 0x3b, 0x00, 0x40, 0x00, 0x45, 0x00, 0x4a,
	0x00, 0x4f, 0x00, 0x54, 0x00, 0x59, 0x00, 0x5e, 0x00, 0x63, 0x00, 0x68,
	0x00, 0x6d, 0x00, 0x72, 0x00, 0x77, 0x00, 0x7c, 0x00, 0x81, 0x00, 0x86,
	0x00, 0x8b, 0x00, 0x90, 0x00, 0x95, 0x00, 0x9a, 0x00, 0x9f, 0x00, 0xa4,
	0x00, 0xa9, 0x00, 0xae, 0x00, 0xb2, 0x00, 0xb7, 0x00, 0xbc, 0x00, 0xc1,
	0x00, 0xc6, 0x00, 0xcb, 0x00, 0xd0, 0x00, 0xd5, 0x00, 0xdb, 0x00, 0xe0,
	0x00, 0xe5, 0x00, 0xeb, 0x00, 0xf0, 0x00, 0xf6, 0x00, 0xfb, 0x01, 0x01,
	0x01, 0x07, 0x01, 0x0d, 0x01, 0x13, 0x01, 0x19, 0x01, 0x1f, 0x01, 0x25,
	0x01, 0x2b, 0x01, 0x32, 0x01, 0x38, 0x01, 0x3e, 0x01, 0x45, 0x01, 0x4c,
	0x01, 0x52, 0x01, 0x59, 0x01, 0x60, 0x01, 0x67, 0x01, 0x6e, 0x01, 0x75,
	0x01, 0x7c, 0x01, 0x83, 0x01, 0x8b, 0x01, 0x92, 0x01, 0x9a, 0x01, 0xa1,
	0x01, 0xa9, 0x01, 0xb1, 0x01, 0xb9, 0x01, 0xc1, 0x01, 0xc9, 0x01, 0xd1,
	0x01, 0xd9, 0x01, 0xe1, 0x01, 0xe9, 0x01, 0xf2, 0x01, 0xfa, 0x02, 0x03,
	0x02, 0x0c, 0x02, 0x14, 0x02, 0x1d, 0x02, 0x26, 0x02, 0x2f, 0x02, 0x38,
	0x02, 0x41, 0x02, 0x4b, 0x02, 0x54, 0x02, 0x5d, 0x02, 0x67, 0x02, 0x71,
	0x02, 0x7a, 0x02, 0x84, 0x02, 0x8e, 0x02, 0x98, 0x02, 0xa2, 0x02, 0xac,
	0x02, 0xb6, 0x02, 0xc1, 0x02, 0xcb, 0x02, 0xd5, 0x02, 0xe0, 0x02, 0xeb,
	0x02, 0xf5, 0x03, 0x00, 0x03, 0x0b, 0x03, 0x16, 0x03, 0x21, 0x03, 0x2d,
	0x03, 0x38, 0x03, 0x43, 0x03, 0x4f, 0x03, 0x5a, 0x03, 0x66, 0x03, 0x72,
	0x03, 0x7e, 0x03, 0x8a, 0x03, 0x96, 0x03, 0xa2, 0x03, 0xae, 0x03, 0xba,
	0x03, 0xc7, 0x03, 0xd3, 0x03, 0xe0, 0x03, 0xec, 0x03, 0xf9, 0x04, 0x06,
	0x04, 0x13, 0x04, 0x20, 0x04, 0x2d, 0x04, 0x3b, 0x04, 0x48, 0x04, 0x55,
	0x04, 0x63, 0x04, 0x71, 0x04, 0x7e, 0x04, 0x8c, 0x04, 0x9a, 0x04, 0xa8,
	0x04, 0xb6, 0x04, 0xc4, 0x04, 0xd3, 0x04, 0xe1, 0x04, 0xf0, 0x04, 0xfe,
	0x05, 0x0d, 0x05, 0x1c, 0x05, 0x2b, 0x05, 0x3a, 0x05, 0x49, 0x05, 0x58,
	0x05, 0x67, 0x05, 0x77, 0x05, 0x86, 0x05, 0x96, 0x05, 0xa6, 0x05, 0xb5,
	0x05, 0xc5, 0x05, 0xd5, 0x05, 0xe5, 0x05, 0xf6, 0x06, 0x06, 0x06, 0x16,
	0x06, 0x27, 0x06, 0x37, 0x06, 0x48, 0x06, 0x59, 0x06, 0x6a, 0x06, 0x7b,
	0x06, 0x8c, 0x06, 0x9d, 0x06, 0xaf, 0x06, 0xc0, 0x06, 0xd1, 0x06, 0xe3,
	0x06, 0xf5, 0x07, 0x07, 0x07, 0x19, 0x07, 0x2b, 0x07, 0x3d, 0x07, 0x4f,
	0x07, 0x61, 0x07, 0x74, 0x07, 0x86, 0x07, 0x99, 0x07, 0xac, 0x07, 0xbf,
	0x07, 0xd2, 0x07, 0xe5, 0x07, 0xf8, 0x08, 0x0b, 0x08, 0x1f, 0x08, 0x32,
	0x08, 0x46, 0x08, 0x5a, 0x08, 0x6e, 0x08, 0x82, 0x08, 0x96, 0x08, 0xaa,
	0x08, 0xbe, 0x08, 0xd2, 0x08, 0xe7, 0x08, 0xfb, 0x09, 0x10, 0x09, 0x25,
	0x09, 0x3a, 0x09, 0x4f, 0x09, 0x64, 0x09, 0x79, 0x09, 0x8f, 0x09, 0xa4,
	0x09, 0xba, 0x09, 0xcf, 0x09, 0xe5, 0x09, 0xfb, 0x0a, 0x11, 0x0a, 0x27,
	0x0a, 0x3d, 0x0a, 0x54, 0x0a, 0x6a, 0x0a, 0x81, 0x0a, 0x98, 0x0a, 0xae,
	0x0a, 0xc5, 0x0a, 0xdc, 0x0a, 0xf3, 0x0b, 0x0b, 0x0b, 0x22, 0x0b, 0x39,
	0x0b, 0x51, 0x0b, 0x69, 0x0b, 0x80, 0x0b, 0x98, 0x0b, 0xb0, 0x0b, 0xc8,
	0x0b, 0xe1, 0x0b, 0xf9, 0x0c, 0x12, 0x0c, 0x2a, 0x0c, 0x43, 0x0c, 0x5c,
	0x0c, 0x75, 0x0c, 0x8e, 0x0c, 0xa7, 0x0c, 0xc0, 0x0c, 0xd9, 0x0c, 0xf3,
	0x0d, 0x0d, 0x0d, 0x26, 0x0d, 0x40, 0x0d, 0x5a, 0x0d, 0x74, 0x0d, 0x8e,
	0x0d, 0xa9, 0x0d, 0xc3, 0x0d, 0xde, 0x0d, 0xf8, 0x0e, 0x13, 0x0e, 0x2e,
	0x0e, 0x49, 0x0e, 0x64, 0x0e, 0x7f, 0x0e, 0x9b, 0x0e, 0xb6, 0x0e, 0xd2,
	0x0e, 0xee, 0x0f, 0x09, 0x0f, 0x25, 0x0f, 0x41, 0x0f, 0x5e, 0x0f, 0x7a,
	0x0f, 0x96, 0x0f, 0xb3, 0x0f, 0xcf, 0x0f, 0xec, 0x10, 0x09, 0x10, 0x26,
	0x10, 0x43, 0x10, 0x61, 0x10, 0x7e, 0x10, 0x9b, 0x10, 0xb9, 0x10, 0xd7,
	0x10, 0xf5, 0x11, 0x13, 0x11, 0x31, 0x11, 0x4f, 0x11, 0x6d, 0x11, 0x8c,
	0x11, 0xaa, 0x11, 0xc9, 0x11, 0xe8, 0x12, 0x07, 0x12, 0x26, 0x12, 0x45,
	0x12, 0x64, 0x12, 0x84, 0x12, 0xa3, 0x12, 0xc3, 0x12, 0xe3, 0x13, 0x03,
	0x13, 0x23, 0x13, 0x43, 0x13, 0x63, 0x13, 0x83, 0x13, 0xa4, 0x13, 0xc5,
	0x13, 0xe5, 0x14, 0x06, 0x14, 0x27, 0x14, 0x49, 0x14, 0x6a, 0x14, 0x8b,
	0x14, 0xad, 0x14, 0xce, 0x14, 0xf0, 0x15, 0x12, 0x15, 0x34, 0x15, 0x56,
	0x15, 0x78, 0x15, 0x9b, 0x15, 0xbd, 0x15, 0xe0, 0x16, 0x03, 0x16, 0x26,
	0x16, 0x49, 0x16, 0x6c, 0x16, 0x8f, 0x16, 0xb2, 0x16, 0xd6, 0x16, 0xfa,
	0x17, 0x1d, 0x17, 0x41, 0x17, 0x65, 0x17, 0x89, 0x17, 0xae, 0x17, 0xd2,
	0x17, 0xf7, 0x18, 0x1b, 0x18, 0x40, 0x18, 0x65, 0x18, 0x8a, 0x18, 0xaf,
	0x18, 0xd5, 0x18, 0xfa, 0x19, 0x20, 0x19, 0x45, 0x19, 0x6b, 0x19, 0x91,
	0x19, 0xb7, 0x19, 0xdd, 0x1a, 0x04, 0x1a, 0x2a, 0x1a, 0x51, 0x1a, 0x77,
	0x1a, 0x9e, 0x1a, 0xc5, 0x1a, 0xec, 0x1b, 0x14, 0x1b, 0x3b, 0x1b, 0x63,
	0x1b, 0x8a, 0x1b, 0xb2, 0x1b, 0xda, 0x1c, 0x02, 0x1c, 0x2a, 0x1c, 0x52,
	0x1c, 0x7b, 0x1c, 0xa3, 0x1c, 0xcc, 0x1c, 0xf5, 0x1d, 0x1e, 0x1d, 0x47,
	0x1d, 0x70, 0x1d, 0x99, 0x1d, 0xc3, 0x1d, 0xec, 0x1e, 0x16, 0x1e, 0x40,
	0x1e, 0x6a, 0x1e, 0x94, 0x1e, 0xbe, 0x1e, 0xe9, 0x1f, 0x13, 0x1f, 0x3e,
	0x1f, 0x69, 0x1f, 0x94, 0x1f, 0xbf, 0x1f, 0xea, 0x20, 0x15, 0x20, 0x41,
	0x20, 0x6c, 0x20, 0x98, 0x20, 0xc4, 0x20, 0xf0, 0x21, 0x1c, 0x21, 0x48,
	0x21, 0x75, 0x21, 0xa1, 0x21, 0xce, 0x21, 0xfb, 0x22, 0x27, 0x22, 0x55,
	0x22, 0x82, 0x22, 0xaf, 0x22, 0xdd, 0x23, 0x0a, 0x23, 0x38, 0x23, 0x66,
	0x23, 0x94, 0x23, 0xc2, 0x23, 0xf0, 0x24, 0x1f, 0x24, 0x4d, 0x24, 0x7c,
	0x24, 0xab, 0x24, 0xda, 0x25, 0x09, 0x25, 0x38, 0x25, 0x68, 0x25, 0x97,
	0x25, 0xc7, 0x25, 0xf7, 0x26, 0x27, 0x26, 0x57, 0x26, 0x87, 0x26, 0xb7,
	0x26, 0xe8, 0x27, 0x18, 0x27, 0x49, 0x27, 0x7a, 0x27, 0xab, 0x27, 0xdc,
	0x28, 0x0d, 0x28, 0x3f, 0x28, 0x71, 0x28, 0xa2, 0x28, 0xd4, 0x29, 0x06,
	0x29, 0x38, 0x29, 0x6b, 0x29, 0x9d, 0x29, 0xd0, 0x2a, 0x02, 0x2a, 0x35,
	0x2a, 0x68, 0x2a, 0x9b, 0x2a, 0xcf, 0x2b, 0x02, 0x2b, 0x36, 0x2b, 0x69,
	0x2b, 0x9d, 0x2b, 0xd1, 0x2c, 0x05, 0x2c, 0x39, 0x2c, 0x6e, 0x2c, 0xa2,
	0x2c, 0xd7, 0x2d, 0x0c, 0x2d, 0x41, 0x2d, 0x76, 0x2d, 0xab, 0x2d, 0xe1,
	0x2e, 0x16, 0x2e, 0x4c, 0x2e, 0x82, 0x2e, 0xb7, 0x2e, 0xee, 0x2f, 0x24,
	0x2f, 0x5a, 0x2f, 0x91, 0x2f, 0xc7, 0x2f, 0xfe, 0x30, 0x35, 0x30, 0x6c,
	0x30, 0xa4, 0x30, 0xdb, 0x31, 0x12, 0x31, 0x4a, 0x31, 0x82, 0x31, 0xba,
	0x31, 0xf2, 0x32, 0x2a, 0x32, 0x63, 0x32, 0x9b, 0x32, 0xd4, 0x33, 0x0d,
	0x33, 0x46, 0x33, 0x7f, 0x33, 0xb8, 0x33, 0xf1, 0x34, 0x2b, 0x34, 0x65,
	0x34, 0x9e, 0x34, 0xd8, 0x35, 0x13, 0x35, 0x4d, 0x35, 0x87, 0x35, 0xc2,
	0x35, 0xfd, 0x36, 0x37, 0x36, 0x72, 0x36, 0xae, 0x36, 0xe9, 0x37, 0x24,
	0x37, 0x60, 0x37, 0x9c, 0x37, 0xd7, 0x38, 0x14, 0x38, 0x50, 0x38, 0x8c,
	0x38, 0xc8, 0x39, 0x05, 0x39, 0x42, 0x39, 0x7f, 0x39, 0xbc, 0x39, 0xf9,
	0x3a, 0x36, 0x3a, 0x74, 0x3a, 0xb2, 0x3a, 0xef, 0x3b, 0x2d, 0x3b, 0x6b,
	0x3b, 0xaa, 0x3b, 0xe8, 0x3c, 0x27, 0x3c, 0x65, 0x3c, 0xa4, 0x3c, 0xe3,
	0x3d, 0x22, 0x3d, 0x61, 0x3d, 0xa1, 0x3d, 0xe0, 0x3e, 0x20, 0x3e, 0x60,
	0x3e, 0xa0, 0x3e, 0xe0, 0x3f, 0x21, 0x3f, 0x61, 0x3f, 0xa2, 0x3f, 0xe2,
	0x40, 0x23, 0x40, 0x64, 0x40, 0xa6, 0x40, 0xe7, 0x41, 0x29, 0x41, 0x6a,
	0x41, 0xac, 0x41, 0xee, 0x42, 0x30, 0x42, 0x72, 0x42, 0xb5, 0x42, 0xf7,
	0x43, 0x3a, 0x43, 0x7d, 0x43, 0xc0, 0x44, 0x03, 0x44, 0x47, 0x44, 0x8a,
	0x44, 0xce, 0x45, 0x12, 0x45, 0x55, 0x45, 0x9a, 0x45, 0xde, 0x46, 0x22,
	0x46, 0x67, 0x46, 0xab, 0x46, 0xf0, 0x47, 0x35, 0x47, 0x7b, 0x47, 0xc0,
	0x48, 0x05, 0x48, 0x4b, 0x48, 0x91, 0x48, 0xd7, 0x49, 0x1d, 0x49, 0x63,
	0x49, 0xa9, 0x49, 0xf0, 0x4a, 0x37, 0x4a, 0x7d, 0x4a, 0xc4, 0x4b, 0x0c,
	0x4b, 0x53, 0x4b, 0x9a, 0x4b, 0xe2, 0x4c, 0x2a, 0x4c, 0x72, 0x4c, 0xba,
	0x4d, 0x02, 0x4d, 0x4a, 0x4d, 0x93, 0x4d, 0xdc, 0x4e, 0x25, 0x4e, 0x6e,
	0x4e, 0xb7, 0x4f, 0x00, 0x4f, 0x49, 0x4f, 0x93, 0x4f, 0xdd, 0x50, 0x27,
	0x50, 0x71, 0x50, 0xbb, 0x51, 0x06, 0x51, 0x50, 0x51, 0x9b, 0x51, 0xe6,
	0x52, 0x31, 0x52, 0x7c, 0x52, 0xc7, 0x53, 0x13, 0x53, 0x5f, 0x53, 0xaa,
	0x53, 0xf6, 0x54, 0x42, 0x54, 0x8f, 0x54, 0xdb, 0x55, 0x28, 0x55, 0x75,
	0x55, 0xc2, 0x56, 0x0f, 0x56, 0x5c, 0x56, 0xa9, 0x56, 0xf7, 0x57, 0x44,
	0x57, 0x92, 0x57, 0xe0, 0x58, 0x2f, 0x58, 0x7d, 0x58, 0xcb, 0x59, 0x1a,
	0x59, 0x69, 0x59, 0xb8, 0x5a, 0x07, 0x5a, 0x56, 0x5a, 0xa6, 0x5a, 0xf5,
	0x5b, 0x45, 0x5b, 0x95, 0x5b, 0xe5, 0x5c, 0x35, 0x5c, 0x86, 0x5c, 0xd6,
	0x5d, 0x27, 0x5d, 0x78, 0x5d, 0xc9, 0x5e, 0x1a, 0x5e, 0x6c, 0x5e, 0xbd,
	0x5f, 0x0f, 0x5f, 0x61, 0x5f, 0xb3, 0x60, 0x05, 0x60, 0x57, 0x60, 0xaa,
	0x60, 0xfc, 0x61, 0x4f, 0x61, 0xa2, 0x61, 0xf5, 0x62, 0x49, 0x62, 0x9c,
	0x62, 0xf0, 0x63, 0x43, 0x63, 0x97, 0x63, 0xeb, 0x64, 0x40, 0x64, 0x94,
	0x64, 0xe9, 0x65, 0x3d, 0x65, 0x92, 0x65, 0xe7, 0x66, 0x3d, 0x66, 0x92,
	0x66, 0xe8, 0x67, 0x3d, 0x67, 0x93, 0x67, 0xe9, 0x68, 0x3f, 0x68, 0x96,
	0x68, 0xec, 0x69, 0x43, 0x69, 0x9a, 0x69, 0xf1, 0x6a, 0x48, 0x6a, 0x9f,
	0x6a, 0xf7, 0x6b, 0x4f, 0x6b, 0xa7, 0x6b, 0xff, 0x6c, 0x57, 0x6c, 0xaf,
	0x6d, 0x08, 0x6d, 0x60, 0x6d, 0xb9, 0x6e, 0x12, 0x6e, 0x6b, 0x6e, 0xc4,
	0x6f, 0x1e, 0x6f, 0x78, 0x6f, 0xd1, 0x70, 0x2b, 0x70, 0x86, 0x70, 0xe0,
	0x71, 0x3a, 0x71, 0x95, 0x71, 0xf0, 0x72, 0x4b, 0x72, 0xa6, 0x73, 0x01,
	0x73, 0x5d, 0x73, 0xb8, 0x74, 0x14, 0x74, 0x70, 0x74, 0xcc, 0x75, 0x28,
	0x75, 0x85, 0x75, 0xe1, 0x76, 0x3e, 0x76, 0x9b, 0x76, 0xf8, 0x77, 0x56,
	0x77, 0xb3, 0x78, 0x11, 0x78, 0x6e, 0x78, 0xcc, 0x79, 0x2a, 0x79, 0x89,
	0x79, 0xe7, 0x7a, 0x46, 0x7a, 0xa5, 0x7b, 0x04, 0x7b, 0x63, 0x7b, 0xc2,
	0x7c, 0x21, 0x7c, 0x81, 0x7c, 0xe1, 0x7d, 0x41, 0x7d, 0xa1, 0x7e, 0x01,
	0x7e, 0x62, 0x7e, 0xc2, 0x7f, 0x23, 0x7f, 0x84, 0x7f, 0xe5, 0x80, 0x47,
	0x80, 0xa8, 0x81, 0x0a, 0x81, 0x6b, 0x81, 0xcd, 0x82, 0x30, 0x82, 0x92,
	0x82, 0xf4, 0x83, 0x57, 0x83, 0xba, 0x84, 0x1d, 0x84, 0x80, 0x84, 0xe3,
	0x85, 0x47, 0x85, 0xab, 0x86, 0x0e, 0x86, 0x72, 0x86, 0xd7, 0x87, 0x3b,
	0x87, 0x9f, 0x88, 0x04, 0x88, 0x69, 0x88, 0xce, 0x89, 0x33, 0x89, 0x99,
	0x89, 0xfe, 0x8a, 0x64, 0x8a, 0xca, 0x8b, 0x30, 0x8b, 0x96, 0x8b, 0xfc,
	0x8c, 0x63, 0x8c, 0xca, 0x8d, 0x31, 0x8d, 0x98, 0x8d, 0xff, 0x8e, 0x66,
	0x8e, 0xce, 0x8f, 0x36, 0x8f, 0x9e, 0x90, 0x06, 0x90, 0x6e, 0x90, 0xd6,
	0x91, 0x3f, 0x91, 0xa8, 0x92, 0x11, 0x92, 0x7a, 0x92, 0xe3, 0x93, 0x4d,
	0x93, 0xb6, 0x94, 0x20, 0x94, 0x8a, 0x94, 0xf4, 0x95, 0x5f, 0x95, 0xc9,
	0x96, 0x34, 0x96, 0x9f, 0x97, 0x0a, 0x97, 0x75, 0x97, 0xe0, 0x98, 0x4c,
	0x98, 0xb8, 0x99, 0x24, 0x99, 0x90, 0x99, 0xfc, 0x9a, 0x68, 0x9a, 0xd5,
	0x9b, 0x42, 0x9b, 0xaf, 0x9c, 0x1c, 0x9c, 0x89, 0x9c, 0xf7, 0x9d, 0x64,
	0x9d, 0xd2, 0x9e, 0x40, 0x9e, 0xae, 0x9f, 0x1d, 0x9f, 0x8b, 0x9f, 0xfa,
	0xa0, 0x69, 0xa0, 0xd8, 0xa1, 0x47, 0xa1, 0xb6, 0xa2, 0x26, 0xa2, 0x96,
	0xa3, 0x06, 0xa3, 0x76, 0xa3, 0xe6, 0xa4, 0x56, 0xa4, 0xc7, 0xa5, 0x38,
	0xa5, 0xa9, 0xa6, 0x1a, 0xa6, 0x8b, 0xa6, 0xfd, 0xa7, 0x6e, 0xa7, 0xe0,
	0xa8, 0x52, 0xa8, 0xc4, 0xa9, 0x37, 0xa9, 0xa9, 0xaa, 0x1c, 0xaa, 0x8f,
	0xab, 0x02, 0xab, 0x75, 0xab, 0xe9, 0xac, 0x5c, 0xac, 0xd0, 0xad, 0x44,
	0xad, 0xb8, 0xae, 0x2d, 0xae, 0xa1, 0xaf, 0x16, 0xaf, 0x8b, 0xb0, 0x00,
	0xb0, 0x75, 0xb0, 0xea, 0xb1, 0x60, 0xb1, 0xd6, 0xb2, 0x4b, 0xb2, 0xc2,
	0xb3, 0x38, 0xb3, 0xae, 0xb4, 0x25, 0xb4, 0x9c, 0xb5, 0x13, 0xb5, 0x8a,
	0xb6, 0x01, 0xb6, 0x79, 0xb6, 0xf0, 0xb7, 0x68, 0xb7, 0xe0, 0xb8, 0x59,
	0xb8, 0xd1, 0xb9, 0x4a, 0xb9, 0xc2, 0xba, 0x3b, 0xba, 0xb5, 0xbb, 0x2e,
	0xbb, 0xa7, 0xbc, 0x21, 0xbc, 0x9b, 0xbd, 0x15, 0xbd, 0x8f, 0xbe, 0x0a,
	0xbe, 0x84, 0xbe, 0xff, 0xbf, 0x7a, 0xbf, 0xf5, 0xc0, 0x70, 0xc0, 0xec,
	0xc1, 0x67, 0xc1, 0xe3, 0xc2, 0x5f, 0xc2, 0xdb, 0xc3, 0x58, 0xc3, 0xd4,
	0xc4, 0x51, 0xc4, 0xce, 0xc5, 0x4b, 0xc5, 0xc8, 0xc6, 0x46, 0xc6, 0xc3,
	0xc7, 0x41, 0xc7, 0xbf, 0xc8, 0x3d, 0xc8, 0xbc, 0xc9, 0x3a, 0xc9, 0xb9,
	0xca, 0x38, 0xca, 0xb7, 0xcb, 0x36, 0xcb, 0xb6, 0xcc, 0x35, 0xcc, 0xb5,
	0xcd, 0x35, 0xcd, 0xb5, 0xce, 0x36, 0xce, 0xb6, 0xcf, 0x37, 0xcf, 0xb8,
	0xd0, 0x39, 0xd0, 0xba, 0xd1, 0x3c, 0xd1, 0xbe, 0xd2, 0x3f, 0xd2, 0xc1,
	0xd3, 0x44, 0xd3, 0xc6, 0xd4, 0x49, 0xd4, 0xcb, 0xd5, 0x4e, 0xd5, 0xd1,
	0xd6, 0x55, 0xd6, 0xd8, 0xd7, 0x5c, 0xd7, 0xe0, 0xd8, 0x64, 0xd8, 0xe8,
	0xd9, 0x6c, 0xd9, 0xf1, 0xda, 0x76, 0xda, 0xfb, 0xdb, 0x80, 0xdc, 0x05,
	0xdc, 0x8a, 0xdd, 0x10, 0xdd, 0x96, 0xde, 0x1c, 0xde, 0xa2, 0xdf, 0x29,
	0xdf, 0xaf, 0xe0, 0x36, 0xe0, 0xbd, 0xe1, 0x44, 0xe1, 0xcc, 0xe2, 0x53,
	0xe2, 0xdb, 0xe3, 0x63, 0xe3, 0xeb, 0xe4, 0x73, 0xe4, 0xfc, 0xe5, 0x84,
	0xe6, 0x0d, 0xe6, 0x96, 0xe7, 0x1f, 0xe7, 0xa9, 0xe8, 0x32, 0xe8, 0xbc,
	0xe9, 0x46, 0xe9, 0xd0, 0xea, 0x5b, 0xea, 0xe5, 0xeb, 0x70, 0xeb, 0xfb,
	0xec, 0x86, 0xed, 0x11, 0xed, 0x9c, 0xee, 0x28, 0xee, 0xb4, 0xef, 0x40,
	0xef, 0xcc, 0xf0, 0x58, 0xf0, 0xe5, 0xf1, 0x72, 0xf1, 0xff, 0xf2, 0x8c,
	0xf3, 0x19, 0xf3, 0xa7, 0xf4, 0x34, 0xf4, 0xc2, 0xf5, 0x50, 0xf5, 0xde,
	0xf6, 0x6d, 0xf6, 0xfb, 0xf7, 0x8a, 0xf8, 0x19, 0xf8, 0xa8, 0xf9, 0x38,
	0xf9, 0xc7, 0xfa, 0x57, 0xfa, 0xe7, 0xfb, 0x77, 0xfc, 0x07, 0xfc, 0x98,
	0xfd, 0x29, 0xfd, 0xba, 0xfe, 0x4b, 0xfe, 0xdc, 0xff, 0x6d, 0xff, 0xff
};

static const uint8_t ktoneCurve [] = {
	0x00, 0x00, 0x01, 0x02, 0x03, 0x05, 0x06, 0x08, 0x0a, 0x0c, 0x0d, 0x0f, 
	0x11, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1f, 0x21, 0x23, 0x26, 0x28, 0x2b, 
	0x2d, 0x30, 0x32, 0x35, 0x37, 0x3a, 0x3d, 0x3f, 0x42, 0x44, 0x47, 0x49, 
	0x4c, 0x4e, 0x50, 0x53, 0x55, 0x57, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 
	0x66, 0x69, 0x6b, 0x6d, 0x6f, 0x71, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 
	0x7d, 0x7f, 0x81, 0x83, 0x85, 0x86, 0x88, 0x8a, 0x8b, 0x8d, 0x8e, 0x90, 
	0x91, 0x93, 0x94, 0x96, 0x97, 0x98, 0x9a, 0x9b, 0x9c, 0x9e, 0x9f, 0xa0, 
	0xa2, 0xa3, 0xa4, 0xa5, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xae, 0xaf, 
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 
	0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 
	0xc7, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xcf, 
	0xd0, 0xd1, 0xd1, 0xd2, 0xd3, 0xd4, 0xd4, 0xd5, 0xd6, 0xd6, 0xd7, 0xd7, 
	0xd8, 0xd9, 0xd9, 0xda, 0xdb, 0xdb, 0xdc, 0xdc, 0xdd, 0xdd, 0xde, 0xdf, 
	0xdf, 0xe0, 0xe0, 0xe1, 0xe1, 0xe2, 0xe2, 0xe3, 0xe3, 0xe4, 0xe4, 0xe5, 
	0xe5, 0xe6, 0xe6, 0xe7, 0xe7, 0xe8, 0xe8, 0xe9, 0xe9, 0xe9, 0xea, 0xea, 
	0xeb, 0xeb, 0xec, 0xec, 0xec, 0xed, 0xed, 0xed, 0xee, 0xee, 0xef, 0xef, 
	0xef, 0xf0, 0xf0, 0xf0, 0xf1, 0xf1, 0xf2, 0xf2, 0xf2, 0xf2, 0xf3, 0xf3, 
	0xf3, 0xf4, 0xf4, 0xf4, 0xf5, 0xf5, 0xf5, 0xf5, 0xf6, 0xf6, 0xf6, 0xf7, 
	0xf7, 0xf7, 0xf7, 0xf8, 0xf8, 0xf8, 0xf8, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 
	0xfa, 0xfa, 0xfa, 0xfa, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfc, 0xfc, 0xfc, 
	0xfc, 0xfc, 0xfc, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfe, 0xfe, 0xfe, 
	0xfe, 0xfe, 0xfe, 0xff
};


//////////////////////////////////////////////////////////////
//
// JPEG compression 
// Uses the Independent JPEG Group's library: http://www.ijg.org/
// The code was mostly writtem by Tom Lane.
//
//////////////////////////////////////////////////////////////
// write_JPEG_file is mostly a direct copy from the ijg's sample code, but
// adds injecting a sRGB profile into the file. This is done without using a
// CMM such as LittleCMS so as to minimise external dependencies

void write_JPEG_file (char * filename, 
							  int quality, 
							  JSAMPLE * image_buffer,
							  int image_height,
							  int image_width)
{
	// This struct contains the JPEG compression parameters and pointers to
	// working space (which is allocated as needed by the JPEG library).
	struct jpeg_compress_struct cinfo;
	
	// This struct represents a JPEG error handler.
	struct jpeg_error_mgr jerr;
	// The outfile and data pointers
	FILE * outfile;
	JSAMPROW row_pointer[1];
	int row_stride;
	
	// Allocate and initialize JPEG compression object
	cinfo.err = jpeg_std_error(&jerr);
	jpeg_create_compress(&cinfo);
	
	// Specify data destination (our file)
	if ((outfile = fopen(filename, "wb")) == NULL) {
		fprintf(stderr, "can't open %s\n", filename);
		exit(1);
	}
	jpeg_stdio_dest(&cinfo, outfile);
	
	// Set parameters for compression
	// Note that the JPEG library's "color_space" isn't actually a color space;
	// it's really just a data format setting. The library has no knowledge of 
	// ICC type color spaces.
	cinfo.image_width = image_width;
	cinfo.image_height = image_height;
	// We will ask pcdDecoder for RGB, no alpha
	cinfo.input_components = 3;
	// 8-bit RGB
	cinfo.in_color_space = JCS_RGB;
	
	// Now use the library's routine to set default compression parameters.
	jpeg_set_defaults(&cinfo);
	
	// Set the quality, and specify baseline JPEG to maximise compatibility
	jpeg_set_quality(&cinfo, quality, TRUE);
	
	// Start compressor, specifying a complete interchange-JPEG file
	jpeg_start_compress(&cinfo, TRUE);
	
	// Write the JPEG marker header (APP2 code and marker length with its data)
	jpeg_write_marker (&cinfo, JPEG_APP0 + 2,
					   ksRGBProfile, sizeof(ksRGBProfile));
	
	// Write the actual scanlines
	row_stride = image_width * 3;
	while (cinfo.next_scanline < cinfo.image_height) {
		row_pointer[0] = & image_buffer[cinfo.next_scanline * row_stride];
		(void) jpeg_write_scanlines(&cinfo, row_pointer, 1);
	}
	
	// Finish compression and close the file
	jpeg_finish_compress(&cinfo);
	fclose(outfile);
	
	// Release JPEG compression object
	jpeg_destroy_compress(&cinfo);
}


//////////////////////////////////////////////////////////////
//
// The main program 
//
//////////////////////////////////////////////////////////////
// All this does is to parse the command line, pass the file to the decoder,
// apply brightness if requested, then write out the file as a JPEG

#define kpcdtojpegVersion "1.0.11"

void printName()
{
	fprintf (stderr,
			 "\n"
			 "pcdtojpeg, version " kpcdtojpegVersion " "
			 "\n"
			 "Copyright (C) 2009-2013 Sandy McGuffog\n"
			 "JPEG compression code Copyright (C) 1991-1998, Thomas G. Lane.\n");		
}

void printUsage(char * const argv [], bool isVerbose)
{
	if (!isVerbose) printName();
	fprintf (stderr,
			 "\n"
			 "Usage:  %s [options] file1 [file2]\n"
			 "\n"
			 "Valid options:\n"
			 "-h            Print this message\n"
			 "-v            Verbose file information\n"
			 "-m            Process the file as monochrome\n"
			 "-D50          Process for a white balance of D50\n"
			 "-D65          Process for a white balance of D65 <default>\n"
			 "-q nnn        JPEG file quality (nnn range 1 to 100 <100>)\n"
			 "-b n.n        Brightness adjustment (n.n range -2.0 to 2.0 <0.0>)\n"			 
			 "-r n          Highest resolution to extract (n range 0 to 5):\n"
			 "                 0 - Base/16 (128 x 192)\n"
			 "                 1 - Base/4 (256 x 384)\n"
			 "                 2 - Base (512 x 768)\n"
			 "                 3 - 4Base (1024 x 1536)\n"
			 "                <4 - 16Base (2048 x 3072)>\n"
			 "                 5 - 64Base (4096 x 6144)\n"
			 "\n",
			 argv [0]);		
}

int main (int argc, char * const argv[]) {
    // parse the arguments
	bool doneWithArguments = false;
	int argIndex = 1;
	bool isVerbose = false;
	bool isMonochrome = false;
	bool isD50White = false;
	int jpegQuality = 100;
	float jpegBoost = 0.0f;
	int resolution = 4;
	size_t width, height;
	pcdDecode *decoder;
	char outFile[1024];
	char iceFile[1024];
	
	if (argc < 2) {
		printUsage(argv, isVerbose);
		exit(0);
	}
	while ((!doneWithArguments) && (argIndex < argc)) {
		std::string thisArg(argv[argIndex]);
		if (thisArg[0] == '-') {
			if ((thisArg == "-h") || (thisArg == "-H")) {
				printUsage(argv, isVerbose);
				exit(0);
			}
			else if (thisArg == "-v") {
				isVerbose = true;
				printName();
			}
			else if (thisArg == "-m") {
				isMonochrome = true;
			}
			else if (thisArg == "-D50") {
				isD50White = true;
			}
			else if (thisArg == "-D65") {
				isD50White = false;
			}
			else if (thisArg == "-q") {
				if (argIndex > (argc - 2)) {
					printUsage(argv, isVerbose);
					exit(-1);
				}
				jpegQuality = atoi(argv[argIndex+1]);
				jpegQuality = jpegQuality > 100 ? 100 : jpegQuality;
				jpegQuality = jpegQuality < 0 ? 0 : jpegQuality;				
				argIndex++;
			}
			else if (thisArg == "-b") {
				if (argIndex > (argc - 2)) {
					printUsage(argv, isVerbose);
					exit(-1);
				}
				jpegBoost = (float) atof(argv[argIndex+1]);
				jpegBoost = jpegBoost > 2.0f ? 2.0f : jpegBoost;
				jpegBoost = jpegBoost < -2.0f ? -2.0f : jpegBoost;				
				argIndex++;
			}
			else if (thisArg == "-r") {
				if (argIndex > (argc - 2)) {
					printUsage(argv, isVerbose);
					exit(-1);
				}
				resolution = atoi(argv[argIndex+1]);
				resolution = resolution > 5 ? 5 : resolution;
				resolution = resolution < 0 ? 0 : resolution;				
				argIndex++;				
			}
			else {
				fprintf (stderr, "Invalid argument\n");		
				printUsage(argv, isVerbose);
				exit(-1);
				}
			argIndex++;
		}
		else {
			doneWithArguments = true;
		}
	}
	// Now check we have file[s]
	if (argIndex > (argc - 1)) {
		fprintf (stderr, "Invalid argument\n");		
		printUsage(argv, isVerbose);
		exit(-1);
	}

	// Let's see if we can actually find this file
	// Of course, windows can't even have a normal stat function.....

#if defined(pcdHaveWinOS)
	struct _stat stFileInfo;  
	if (_stat(argv[argIndex], &stFileInfo) == -1) {
#else
	struct stat stFileInfo;  
	if (stat(argv[argIndex], &stFileInfo) == -1) {			
#endif
		fprintf (stderr, "pcdtojpeg could not find the file \"%s\" - check the name you entered\n", argv[argIndex]);		
		exit(-1);		
	}
	// Get us a decoder
	decoder = new pcdDecode();
	if (decoder == NULL) {
		fprintf (stderr, "Could not create a decoder - probably too little memory\n");		
		exit(-1);		
	}
	// Set to the best possible quality interpolation; if this is the the GPL decoder,
	// it doesn't actually have the kUpResLumaIterpolate, but will automatically fall 
	// back to the best it has
	decoder->setInterpolation(kUpResLumaIterpolate);
		
	if (resolution > k16Base) {
		size_t loc;
		std::string pathSep;
		// Some *nix OS's mount older CD-ROMs with a mapping that turns the path all
		// lower case. We detect that here, and adjust how we create the paths.
		// See mount(8) - Linux man page
		bool useLowerCase = false;
		// We need to generate the location of the IC file.
		// Note this only works if the directory structure is the same as the original CD
		// Also note that here, if there isn't a path separator in the path, we can't find 
		// the file anyway, so this is an ok way to decide what separator to use.
		std::string srcFile(argv[argIndex]);
		// Make sure there is enough room in the string, because the standard
		// C++ string implementation is too dumb to do so.....
		srcFile.resize(srcFile.size()+25);

		// What is our separator?
		if (srcFile.find('/') != srcFile.npos) {
			pathSep = "/";
		}
		else if (srcFile.find('\\') != srcFile.npos) {
			pathSep = "\\";
		}
		else {
			std::string exeFile(argv[0]);
			if (exeFile.find('/') != exeFile.npos) {
				pathSep = "/";
			}
			else if (exeFile.find('\\') != exeFile.npos) {
				pathSep = "\\";
			}
			else {
				// Default by platform. We hope.
#if defined(pcdHaveWinOS)
				pathSep = "\\";
#else
				pathSep = "/";			
#endif
			}
		}
		
		// If we are using the working directory, find the full path..
		if ((!(srcFile.find_first_of(pathSep) <= 2)) && (srcFile.find_first_of(":") != 1)) {
			// Need the current working directory
#if defined(pcdHaveWinOS)
			char *workDir =  _getcwd(NULL, 0);
#else
			char *workDir =  getcwd(NULL, 0);			
#endif
			srcFile = srcFile.insert(0, pathSep);		
			srcFile = srcFile.insert(0, workDir);
			free(workDir);
		}

		std::string nameOnly;
		loc = srcFile.find_last_of(".");
		if (loc != std::string::npos) {
			nameOnly = srcFile.erase(loc);
		}
		
		loc = nameOnly.find_last_of(pathSep);
		if (loc != std::string::npos) {
			nameOnly = nameOnly.substr(loc+1);
		}
		
		if (loc != std::string::npos) {
			srcFile.erase(loc);
		}
		loc = srcFile.find_last_of(pathSep);
		if (loc != std::string::npos) {
			srcFile.erase(loc+1);
		}

		
		useLowerCase = (nameOnly.find_last_of("img") != std::string::npos);
		
		srcFile.append(useLowerCase ? "ipe" : "IPE");
		srcFile.append(pathSep);
		srcFile.append(nameOnly);
		srcFile.append(pathSep);
		srcFile.append(useLowerCase ? "64base" : "64BASE");
		srcFile.append(pathSep);
		srcFile.append(useLowerCase ? "info.ic" : "INFO.IC");
		strncpy(iceFile, srcFile.c_str(), 1024);
	}

	// If we want monochrome, now is the time to ask for it
	decoder->setIsMonoChrome(isMonochrome);

	// If we want D50, now is the time to ask for it
	decoder->setWhiteBalance(isD50White ? kPCDD50White : kPCDD65White);
	
	// Parse the file
	if (!decoder->parseFile(argv[argIndex], iceFile, resolution)) {
		// false here means there isn't any kind of a valid image
		fprintf (stderr, "Decoder Error: %s\n", decoder->getErrorString());		
		delete (decoder);
		if (resolution > k16Base) {
			fprintf (stderr, " while trying to process ICE file \"%s\"\n", iceFile);	
		}
		exit(-1);		
	}
	
	// Even if we got a valid image back, there may be warnings - let's print those:
	if (decoder->getErrorString()[0] != 0x0) {
		fprintf (stderr, "Warning: %s\n", decoder->getErrorString());		
		if (resolution > k16Base) {
			fprintf (stderr, " while trying to process ICE file \"%s\"\n", iceFile);	
		}
	}
	
	// At this point we have all the metadata, so we can take decisions based on that 
	// (e.g., resolution, original medium) if that's what we want
	// But the data is still in its component pieces as in the original file, so we can't  
	// call any of the populateBuffer routines
	if (isVerbose) {
		int i;
		char descrip[kPCDMaxStringLength], val[kPCDMaxStringLength];
		printf("Image metadata:\n");
		for (i = 0; i < kMaxPCDMetadata; i++) {
			decoder->getMetadata(i, descrip, val);
			printf("  %s: %s\n", descrip, val);
		}
	}
	
	// We might not actually have gotten an image at the resolution we asked for,
	// so get the size of what we have got.....
	width = decoder->getWidth();
	height = decoder->getHeight();
	if (isVerbose) {
		printf("Image size: %d x %d\n", (int) decoder->getWidth(), (int) decoder->getHeight());
	}
	
	// Now we post parse. This assembles all the various pieces of base and residual 
	// image data into a single YCC format image. This operation is multi-threaded, 
	// if multi-threading is enabled in the decoder library
	decoder->postParse();

	size_t nBytes = width * height * 3 * sizeof(uint8_t);
	uint8_t *table = (uint8_t *) malloc(nBytes);
	
	// sRGB is by far the most widely accepted color space, so set up for that
	decoder->setColorSpace(kPCDsRGBColorSpace);
	
	if (table != NULL) {
		// Now we call populateBuffers. This converts the YCC data (that postParse assembled) 
		// into RGB in the choice of formats. This operation is multi-threaded, if 
		// multi-threading is enabled in the decoder library
		decoder->populateUInt8Buffers(&(table[0]), &(table[1]), &(table[2]), NULL, 3);
	}
	else {
		fprintf (stderr, "Could not allocate memory for the JPEG conversion\n");		
		delete (decoder);
		exit(-1);			
	}
	// We can free the decoder's memory now, as we have the buffer full of RGB data
	delete (decoder);
	decoder = NULL;
	
	// Apply a tone curve if that's what the user asked for...
	// In combination with the sRGB tone curve, this results in a sigmoidal (s-shaped) 
	// tone curve, similar to, e.g., the default ACR tone curve.
	// For more information, see "General-Purpose Gamut-Mapping Algorithms: Evaluation of 
	// Contrast-Preserving Rescaling Functions for Color Gamut Mapping", Gustav J. Braun 
	// and Mark D. Fairchild
	if ((jpegBoost > 0.005f) || (jpegBoost < -.005f)) {
		uint8_t *ptr = table;
		uint8_t ourCurve[sizeof(ktoneCurve)];
		int i;
		float f;
		// First we build the curve as a look-up table for speed
		for (i = 0; i < sizeof(ktoneCurve); i++) {
			f = ((((float) ktoneCurve[i]) - ((float) i)) * jpegBoost + ((float) i));
			f = f > 255.0f ? 255.0f : (f < 0.0f ? 0.0f : f);
			ourCurve[i] = (int8_t) f;
		}
		// Then just iterate the image real fast
		while (nBytes-- > 0) {
			*ptr = ourCurve[*ptr];
			ptr++;
		}
	}
	
	// If an output file wasn't specified, synthesize a filename
	if (argIndex < (argc-1)) {
		strncpy(outFile, argv[argIndex+1], 1024);
		}
	else {
		// Create a new filename
		std::string baseFile(argv[argIndex]);
		size_t loc = baseFile.find_last_of(".");
		// Make sure there is enough room in the string, because the standard
		// C++ string implementation is too dumb to do so.....
		baseFile.resize(baseFile.size()+3);
		if (loc != std::string::npos) {
			baseFile = baseFile.erase(loc);
		}
		baseFile = baseFile.append(".jpg");
		strncpy(outFile, baseFile.c_str(), 1024);
	}
	
	// Now we just compress the buffer into a JPEG format file, courtesy of Thomas G. 
	// Lane's JPEG library, and also add the sRGB profile.
	// If we don't add the profile, then all our hard work in the decoder to keep the 
	// color space straight goes to waste.....
	write_JPEG_file (outFile, 
					 jpegQuality, 
					 table,
					 (int) height,
					 (int) width);
	
	free(table);
	table = NULL;

    return 0;
}
